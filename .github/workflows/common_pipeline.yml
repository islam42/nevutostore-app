# Common pipeline with build artifact and pre-push scanning
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      port:
        required: true
        type: string
      runner:
        required: true
        type: string

env:
  APP_NAME: "nextjs-ts-app"
  DOCKER_REGISTRY: "docker.io"
  TRIVY_SEVERITY: "HIGH,CRITICAL"
  TRIVY_IGNORE_UNFIXED: "true"
  TRIVY_VULN_TYPE: "os,library"

jobs:

  build:
    runs-on: ${{ inputs.runner }}
    environment: ${{ inputs.environment }}
    outputs:
      full_image_tag: ${{ steps.set_outputs.outputs.image_ref }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Set image outputs
        id: set_outputs
        run: |
          tag="${{ env.DOCKER_REGISTRY }}/${{ vars.DOCKER_HUB_USERNAME }}/${{ env.APP_NAME }}:$(date +%Y%m%d)-$(git rev-parse --short HEAD)"
          echo "image_ref=${tag}" >> "$GITHUB_OUTPUT"

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ steps.set_outputs.outputs.image_ref }}
          outputs: type=docker,dest=/tmp/image.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/image.tar
          retention-days: 1

  trivy_scan:
    needs: build
    runs-on: ${{ inputs.runner }}
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          
      - name: Load Docker image
        run: |
          docker load -i image.tar
          echo "Loaded image: ${{ needs.build.outputs.full_image_tag }}"
          
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@7b7aa264d83dc58691451798b4d117d53d21edfe
        with:
          image-ref: ${{ needs.build.outputs.full_image_tag }}
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: ${{ env.TRIVY_SEVERITY }}
          ignore-unfixed: ${{ env.TRIVY_IGNORE_UNFIXED }}
          vuln-type: ${{ env.TRIVY_VULN_TYPE }}

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  push:
    needs: build
    environment: ${{ inputs.environment }}
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Load image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp
          
      - name: Import image
        run: docker load -i /tmp/image.tar

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
      - name: Push to registry
        run: |
          FULL_REF="${{ needs.build.outputs.full_image_tag }}"
          
          echo "Pushing: ${FULL_REF}"
          docker push "${FULL_REF}"

  deploy:
    needs: [push, build]
    runs-on: ${{ inputs.runner }}
    environment: ${{ inputs.environment }}
    steps:
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DROPLET_SSH_KEY }}
          known_hosts: unnecessary
      - name: Deploy to DigitalOcean
        run: |
          ssh -o StrictHostKeyChecking=no \
              root@${{ secrets.DROPLET_IP }} \
              "docker pull ${{ needs.build.outputs.full_image_tag }} && \
               docker stop ${{ env.APP_NAME }}-${{ inputs.environment }} || true && \
               docker rm ${{ env.APP_NAME }}-${{ inputs.environment }} || true && \
               docker run -d \
                 --name ${{ env.APP_NAME }}-${{ inputs.environment }} \
                 -p ${{ inputs.port }}:3000 \
                 -e NODE_ENV=${{ inputs.environment }} \
                 --restart unless-stopped \
                 ${{ needs.build.outputs.full_image_tag }}"
