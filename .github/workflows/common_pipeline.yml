# Common pipeline with build artifact and pre-push scanning
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      port:
        required: true
        type: string

env:
  APP_NAME: "nextjs-ts-app"
  DOCKER_REGISTRY: "docker.io"
  TRIVY_SEVERITY: "HIGH,CRITICAL"
  TRIVY_IGNORE_UNFIXED: "true"
  TRIVY_VULN_TYPE: "os,library"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Generate tag
        id: tag
        run: |
          echo "tag=$(date +%Y%m%d)-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  build:
    needs: setup
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.build.outputs.image_name }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v2
      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.APP_NAME }}:${{ needs.setup.outputs.image_tag }}
          outputs: type=docker,dest=/tmp/image.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Save image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/image.tar

  # trivy_scan:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   environment: ${{ inputs.environment }}
  #   steps:
  #     - name: Download image artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: docker-image
          
  #     - name: Load Docker image
  #       run: |
  #         docker load -i image.tar
  #         echo "Loaded image: ${{ needs.build.outputs.image_name }}"
          
  #     - name: Run Trivy scan
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: ${{ needs.build.outputs.image_name }}
  #         format: 'table'
  #         exit-code: '1'
  #         severity: ${{ env.TRIVY_SEVERITY }}
  #         ignore-unfixed: ${{ env.TRIVY_IGNORE_UNFIXED }}
  #         vuln-type: ${{ env.TRIVY_VULN_TYPE }}

  push:
    needs: [build, trivy_scan]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image
      - name: Load Docker image
        run: docker load -i image.tar
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Push to Docker Hub
        run: |
          docker push ${{ needs.build.outputs.image_name }}
          docker tag ${{ needs.build.outputs.image_name }} ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.APP_NAME }}:latest-${{ inputs.environment }}
          docker push ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.APP_NAME }}:latest-${{ inputs.environment }}

  deploy:
    needs: push
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DROPLET_SSH_KEY }}
          known_hosts: unnecessary
      - name: Deploy to DigitalOcean
        run: |
          ssh -o StrictHostKeyChecking=no \
              root@${{ secrets.DROPLET_IP }} \
              "docker pull ${{ needs.build.outputs.image_name }} && \
               docker stop ${{ env.APP_NAME }}-${{ inputs.environment }} || true && \
               docker rm ${{ env.APP_NAME }}-${{ inputs.environment }} || true && \
               docker run -d \
                 --name ${{ env.APP_NAME }}-${{ inputs.environment }} \
                 -p ${{ inputs.port }}:3000 \
                 -e NODE_ENV=${{ inputs.environment }} \
                 --restart unless-stopped \
                 ${{ needs.build.outputs.image_name }}"
